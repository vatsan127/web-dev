Selectors (used to select HTML elements for styling)
	Basic Selectors
		article					All article elements
		.product				Elements with the product class
		#products				The element with the ID of products
		a[href=“…”]				Anchors with the given href 
		a[href*=“google”]		Anchors whose href contains google 
		a[href^=“https”]		Anchors whose href starts with https
		a[href$=“.com”]			Anchors whose href ends with .com
	
	Relative Selectors 
		div p { /* All <p> elements inside <div> elements */ }
		div > p { /* Only <p> elements that are direct children of <div> */ }
		h1 + p { /* <p> element immediately after <h1> */ }
		h1 ~ p { /* All <p> elements that are siblings after <h1> */ }

	Pseudo Classes (used to select elements based on their state or position.)
		State-based Pseudo Classes:
			:hover - Element being hovered
			:focus - Element with keyboard focus
			:active - Element being clicked
			:visited - Visited links
			:disabled / :enabled - Form element states
			:checked - Checked form controls

		Structural Pseudo Classes:
			:first-child - First child element
			:first-of-type - First occurrence of elements of different type 
			:last-child - Last child element
			:nth-child(n) - Nth child element
			:not() - Elements that don't match selector	

	Pseudo Elements (used for styling specific parts of elements or inserting virtual content)
		::before - Inserts content before element's content
		::after - Inserts content after element's content
		::first-line - Styles the first line of text
		::first-letter - Styles the first letter
		::selection - Styles selected text

Layouts
	Box Model
		Every HTML element is a rectangular box with four components from inside out:
		Content - The actual content (text, images)
		Padding - Space between content and border
		Border - Line around padding and content
		Margin - Space outside the border
		
		Margin collapsing happens when the top and bottom margins of elements are combined into a single margin. The size of the margin is equal to the largest of the two margins. 
		
		Width and height properties have no effect on inline elements. To size an inline element, we need to set its display property to inline-block.

		Box-sizing Property:
			content-box (default) - Width/height applies to content only
			border-box - Width/height includes padding and border	

	
	Position
		Static (default):
			Normal document flow
			Top, right, bottom, left properties have no effect
			Elements stack vertically by default
		Relative:
			Positioned relative to its normal position
			Original space is preserved in document flow
			Can use top, right, bottom, left to offset
		Absolute:
			Removed from normal document flow
			Positioned relative to nearest positioned ancestor
			Other elements behave as if it doesn't exist
		Fixed:
			Removed from document flow
			Positioned relative to the viewport
			Stays in same position when scrolling
		z-index:
			used to change the stacking order
			
	
	Display
		block - Takes full width, starts on new line
		inline - Takes only necessary width, no line break
		inline-block - Inline behavior but accepts width/height
		none - Element not displayed (removed from flow)
		flex - Creates flex container
		grid - Creates grid container	
	

	Flexbox
		One-dimensional layout system for distributing space among items in a container.	
		Flex Container Properties:
			display: flex - Creates flex container
			flex-direction - Main axis direction (row, column)
			justify-content - Alignment along main axis
			align-items - Alignment along cross/secondary axis
			flex-wrap - Whether items wrap to new lines
			align-content - 

		Flex Item Properties:
			flex-grow - How much item grows
			flex-shrink - How much item shrinks
			flex-basis - Initial size before free space distribution
			align-self - Override container's align-items		


	Grid
		Definition
			display: grid;
			grid-template-rows: repeat(3, 100px);
			grid-template-columns: repeat(2, 100px);
			grid-template: repeat(3, 100px) / repeat(2, 100px);
			grid-template-areas: 
				“header   header”
				“sidebar  main”
				“footer   footer”;	
			
		Gaps
			row-gap: 10px;
			column-gap: 20px;
			gap: 10px 20px; 
		
		Alignment
			justify-content: center;	Align the grid horizontally within its container
			align-content: center;		Align the grid vertically within its container

			justify-items: center;		Align the items horizontally within their cell
			align-items: center; 		Align the items vertically within their cell 			 
			
		Placing items
			grid-column: 2;
			grid-column: 1 / 3; 
			grid-column: 1 / -1; 
			grid-column: 1 / span 2; 
			grid-row: 2 / 4; 
			grid-area: header;		  
	

	Sizing Elements
		Absolute - px
		Relative
			% relative to size of the container
			vw, vh relative to size of the view port
			em, rem relative to the font size
		html { font-size: 62.5%}